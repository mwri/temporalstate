{"version":3,"sources":["../lib/temporalstate.js"],"names":["temporalstate","_states","changes","states","val_iter_grp","Object","keys","filter","sn","size","map","iterator","i","next","sort","a","b","change_cmp","length","v","push","st_name","st_val","ts","undefined","_priv_add_state","state","iter","upperBound","data","cur","prev","transaction","_priv_change_add","val","_priv_change_remove","timestamp","_priv_change_change","emit","change","name","find","first_val_changes","earliest_timestamp","last_val_changes","oldest_timestamp","current","next_val_changes","next_timestamp","lowerBound","prev_val_changes","prev_timestamp","rec","reduce","acc","next_rec","cur_rec","from_ts","to_ts","greedy","st_names","var_list","RBTree","insert","remove","new_val","old_val"],"mappings":"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","file":"temporalstate_es5.js","sourcesContent":["import bintrees from 'bintrees';\nimport event_emitter from 'events';\n\n\nclass temporalstate extends event_emitter {\n\n    constructor () {\n\n        super();\n\n        this._states = {};\n\n    }\n\n    change_list () {\n\n        let changes = [];\n        let states = this._states;\n\n        let val_iter_grp = Object.keys(states)\n            .filter((sn) => states[sn].size > 0)\n            .map((sn) => states[sn].iterator())\n            .map((i) => [i.next(), i])\n            .sort((a, b) => temporalstate.change_cmp(a[0], b[0]));\n        while (val_iter_grp.length > 0) {\n            let v = val_iter_grp[0][0];\n            let i = val_iter_grp[0][1];\n            changes.push(v);\n            val_iter_grp[0] = [i.next(), i];\n            val_iter_grp = val_iter_grp\n                .filter((a) => a[0] !== null)\n                .sort((a, b) => temporalstate.change_cmp(a[0], b[0]));\n        }\n\n        return changes;\n\n    }\n\n    add_change (st_name, st_val, ts) {\n\n        let states = this._states;\n\n        if (states[st_name] === undefined)\n            this._priv_add_state(st_name);\n\n        let state = states[st_name];\n        let iter = state.upperBound({'timestamp': ts});\n        let next = iter.data();\n        let cur = iter.prev();\n\n        let transaction = [];\n\n        if (cur === null) {\n            transaction.push({'add': {'timestamp': ts, 'name': st_name, 'val': st_val}});\n            this._priv_change_add({'timestamp': ts, 'name': st_name, 'val': st_val});\n            if (next !== null && next.val === st_val) {\n                transaction.push({'rm': next});\n                this._priv_change_remove(next);\n            }\n        } else if (cur.timestamp === ts) {\n            if (cur.val !== st_val) {\n                let prev = iter.prev();\n                if (prev === null) {\n                    if (st_val === null) {\n                        transaction.push({'remove': cur});\n                        this._priv_change_remove(cur);\n                    } else {\n                        transaction.push({'change': cur, 'new_val': st_val});\n                        this._priv_change_change(cur, st_val);\n                    }\n                    if (next !== null && next.val === st_val) {\n                        transaction.push({'remove': next});\n                        this._priv_change_remove(next);\n                    }\n                } else if (prev.val === st_val) {\n                    transaction.push({'remove': cur});\n                    this._priv_change_remove(cur);\n                    if (next !== null && next.val === st_val) {\n                        transaction.push({'remove': next});\n                        this._priv_change_remove(next);\n                    }\n                } else {\n                    transaction.push({'change': cur, 'new_val': st_val});\n                    this._priv_change_change(cur, st_val);\n                }\n            }\n        } else if (cur.val !== st_val) {\n            transaction.push({'add': {'timestamp': ts, 'name': st_name, 'val': st_val}});\n            this._priv_change_add({'timestamp': ts, 'name': st_name, 'val': st_val});\n        }\n\n        this.emit('txn', {'add': {'timestamp': ts, 'name': st_name, 'val': st_val}}, transaction);\n\n    }\n\n    remove_change (change) {\n\n        let states = this._states;\n        let state = states[change.name];\n\n        if (state === undefined)\n            return;\n\n        let v = state.find(change);\n        if (v !== null && v.val !== change.val)\n                return;\n\n        this._priv_change_remove(change);\n\n        this.emit('txn', {'remove': change}, [{'remove': change}]);\n\n    }\n\n    var_list () {\n\n        return Object.keys(this._states).sort();\n\n    }\n\n    first () {\n\n        let states = this._states;\n\n        let first_val_changes = Object.keys(states)\n            .filter((sn) => states[sn].size > 0)\n            .map((sn) => states[sn].iterator())\n            .map((i) => i.next())\n            .sort(temporalstate.change_cmp);\n        if (first_val_changes.length === 0)\n            return null;\n        let earliest_timestamp = first_val_changes[0].timestamp;\n        return first_val_changes\n            .filter((change) => change.timestamp === earliest_timestamp);\n\n    }\n\n    last () {\n\n        let states = this._states;\n\n        let last_val_changes = Object.keys(states)\n            .filter((sn) => states[sn].size > 0)\n            .map((sn) => states[sn].iterator())\n            .map((i) => i.prev())\n            .sort(temporalstate.change_cmp);\n        if (last_val_changes.length === 0)\n            return null;\n        let oldest_timestamp = last_val_changes[last_val_changes.length - 1].timestamp;\n        return last_val_changes\n            .filter((change) => change.timestamp === oldest_timestamp);\n\n    }\n\n    next (current, st_name) {\n\n        let states = this._states;\n\n        if (st_name !== undefined) {\n            let state = states[st_name];\n            if (state === undefined || state.size === 0)\n                return null;\n            return state.upperBound(current).data();\n        }\n\n        let next_val_changes = Object.keys(states)\n            .filter((sn) => states[sn].size > 0)\n            .map((sn) => states[sn].upperBound(current))\n            .map((i) => {\n                while (i.data() !== null && i.data().timestamp === current.timestamp)\n                    i.next();\n                return i.data();\n            })\n            .filter((change) => change !== null)\n            .sort(temporalstate.change_cmp);\n        if (next_val_changes.length === 0)\n            return null;\n        let next_timestamp = next_val_changes[0].timestamp;\n        return next_val_changes\n            .filter((change) => change.timestamp === next_timestamp);\n\n    }\n\n    prev (current, st_name) {\n\n        let states = this._states;\n\n        if (st_name !== undefined) {\n            let state = states[st_name];\n            if (state === undefined || state.size === 0)\n                return null;\n            let iter = state.lowerBound(current);\n            return iter.prev();\n        }\n\n        let prev_val_changes = Object.keys(states)\n            .filter((sn) => states[sn].size > 0)\n            .map((sn) => states[sn].lowerBound(current))\n            .map((i) => {\n                do {\n                    i.prev();\n                } while (i.data() !== null && i.data().timestamp === current.timestamp);\n                return i.data();\n            })\n            .filter((change) => change !== null)\n            .sort(temporalstate.change_cmp);\n        if (prev_val_changes.length === 0)\n            return null;\n        let prev_timestamp = prev_val_changes[prev_val_changes.length - 1].timestamp;\n        return prev_val_changes\n            .filter((change) => change.timestamp === prev_timestamp);\n\n    }\n\n    at (timestamp) {\n\n        let states = this._states;\n\n        return Object.keys(states)\n            .filter((sn) => states[sn].size > 0)\n            .map((sn) => states[sn].find({'timestamp': timestamp}))\n            .filter((v) => v !== null)\n            .sort(temporalstate.change_cmp);\n\n    }\n\n    after (timestamp) {\n\n        return this.next({'timestamp': timestamp});\n\n    }\n\n    before (timestamp) {\n\n        return this.prev({'timestamp': timestamp});\n\n    }\n\n    state (ts, st_name) {\n\n        let states = this._states;\n\n        if (st_name !== undefined) {\n            let state = states[st_name];\n            if (state === undefined)\n                return null;\n            let iter = state.upperBound({timestamp: ts});\n            let rec = iter.prev();\n            return rec === null ? null : rec.val;\n        }\n\n        return Object.keys(states)\n            .filter((sn) => states[sn].size > 0)\n            .reduce((acc, sn) => {\n                let rec = this.state(ts, sn);\n                if (rec !== null)\n                    acc[sn] = rec;\n                return acc;\n            }, {});\n\n    }\n\n    state_detail (ts, st_name) {\n\n        let states = this._states;\n\n        if (st_name !== undefined) {\n            let state = states[st_name];\n            if (state === undefined)\n                return {'from': null, 'to': null};\n            let iter = state.upperBound({timestamp: ts});\n            let next_rec = iter.data();\n            let cur_rec = iter.prev();\n            if (cur_rec === null && next_rec === null)\n                return null;\n            return {\n                'from': cur_rec,\n                'to': next_rec\n            };\n        }\n\n        return Object.keys(states)\n            .sort()\n            .reduce((acc, sn) => {\n                let state = states[sn];\n                let iter = state.upperBound({timestamp: ts});\n                let next_rec = iter.data();\n                let cur_rec = iter.prev();\n                if (cur_rec !== null || next_rec !== null)\n                    acc.push({\n                        'from': cur_rec,\n                        'to': next_rec\n                    });\n                return acc;\n            }, []);\n\n    }\n\n    between (from_ts, to_ts, greedy, st_name) {\n\n        let states = this._states;\n\n        if (greedy === undefined)\n            greedy = false;\n\n        let st_names = st_name === undefined\n            ? this.var_list()\n            : [st_name];\n\n        let changes = [];\n        for (let i = 0; i < st_names.length; i++) {\n            let state = states[st_names[i]];\n            let iter = state.upperBound({timestamp: from_ts});\n            let cur_rec = iter.prev();\n            if (cur_rec !== null && (greedy || cur_rec.timestamp === from_ts))\n                changes.push(cur_rec);\n            while ((cur_rec = iter.next()) && cur_rec.timestamp <= to_ts) {\n                changes.push(cur_rec);\n            }\n        }\n\n        return changes.sort(temporalstate.change_cmp);\n\n    }\n\n    _priv_add_state (st_name) {\n\n        this._states[st_name] = new bintrees.RBTree(temporalstate.change_cmp);\n        this.emit('new_var', st_name);\n\n    }\n\n    _priv_change_add (change) {\n\n        this._states[change.name].insert(change);\n        this.emit('add', {'timestamp': change.timestamp, 'name': change.name, 'val': change.val});\n\n    }\n\n    _priv_change_remove (change) {\n\n        this._states[change.name].remove(change);\n        this.emit('rm', {'timestamp': change.timestamp, 'name': change.name, 'val': change.val});\n\n    }\n\n    _priv_change_change (change, new_val) {\n\n        let old_val = change.val;\n        change.val = new_val;\n        this.emit('change', {'timestamp': change.timestamp, 'name': change.name, 'val': old_val}, new_val);\n\n    }\n\n    static change_cmp (a, b) {\n\n        return a.timestamp < b.timestamp ? -1\n            : a.timestamp > b.timestamp ? 1\n            : a.name < b.name ? -1\n            : a.name > b.name ? 1\n            : 0;\n\n    }\n\n}\n\n\nexport default temporalstate;\n"]}