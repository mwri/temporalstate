{"version":3,"sources":["../lib/temporalstate.js"],"names":["temporalstate","_states","changes","states","val_iter_grp","Object","keys","filter","sn","size","map","iterator","i","next","sort","a","b","change_cmp","length","v","push","st_name","st_val","ts","undefined","RBTree","state","iter","upperBound","data","cur","prev","insert","val","remove","timestamp","first_val_changes","earliest_timestamp","change","last_val_changes","oldest_timestamp","current","next_val_changes","next_timestamp","prev_val_changes","lowerBound","prev_timestamp","rec","reduce","acc","next_rec","cur_rec","name"],"mappings":";;;;;;;;AAAA;;;;;;;;IAGMA,a;AAEF,6BAAe;AAAA;;AAEX,aAAKC,OAAL,GAAe,EAAf;AAEH;;;;sCAEc;;AAEX,gBAAIC,UAAU,EAAd;AACA,gBAAIC,SAAS,KAAKF,OAAlB;;AAEA,gBAAIG,eAAeC,OAAOC,IAAP,CAAYH,MAAZ,EACdI,MADc,CACP,UAACC,EAAD;AAAA,uBAAQL,OAAOK,EAAP,EAAWC,IAAX,GAAkB,CAA1B;AAAA,aADO,EAEdC,GAFc,CAEV,UAACF,EAAD;AAAA,uBAAQL,OAAOK,EAAP,EAAWG,QAAX,EAAR;AAAA,aAFU,EAGdD,GAHc,CAGV,UAACE,CAAD;AAAA,uBAAO,CAACA,EAAEC,IAAF,EAAD,EAAWD,CAAX,CAAP;AAAA,aAHU,EAIdE,IAJc,CAIT,UAACC,CAAD,EAAIC,CAAJ;AAAA,uBAAUhB,cAAciB,UAAd,CAAyBF,EAAE,CAAF,CAAzB,EAA+BC,EAAE,CAAF,CAA/B,CAAV;AAAA,aAJS,CAAnB;AAKA,mBAAOZ,aAAac,MAAb,GAAsB,CAA7B,EAAgC;AAC5B,oBAAIC,IAAIf,aAAa,CAAb,EAAgB,CAAhB,CAAR;AACA,oBAAIQ,IAAIR,aAAa,CAAb,EAAgB,CAAhB,CAAR;AACAF,wBAAQkB,IAAR,CAAaD,CAAb;AACAf,6BAAa,CAAb,IAAkB,CAACQ,EAAEC,IAAF,EAAD,EAAWD,CAAX,CAAlB;AACAR,+BAAeA,aACVG,MADU,CACH,UAACQ,CAAD;AAAA,2BAAOA,EAAE,CAAF,MAAS,IAAhB;AAAA,iBADG,EAEVD,IAFU,CAEL,UAACC,CAAD,EAAIC,CAAJ;AAAA,2BAAUhB,cAAciB,UAAd,CAAyBF,EAAE,CAAF,CAAzB,EAA+BC,EAAE,CAAF,CAA/B,CAAV;AAAA,iBAFK,CAAf;AAGH;;AAED,mBAAOd,OAAP;AAEH;;;mCAEWmB,O,EAASC,M,EAAQC,E,EAAI;;AAE7B,gBAAIpB,SAAS,KAAKF,OAAlB;;AAEA,gBAAIE,OAAOkB,OAAP,MAAoBG,SAAxB,EACIrB,OAAOkB,OAAP,IAAkB,IAAI,mBAASI,MAAb,CAAoBzB,cAAciB,UAAlC,CAAlB;;AAEJ,gBAAIS,QAAQvB,OAAOkB,OAAP,CAAZ;AACA,gBAAIM,OAAOD,MAAME,UAAN,CAAiB,EAAC,aAAaL,EAAd,EAAjB,CAAX;AACA,gBAAIV,OAAOc,KAAKE,IAAL,EAAX;AACA,gBAAIC,MAAMH,KAAKI,IAAL,EAAV;;AAEA,gBAAID,QAAQ,IAAZ,EAAkB;AACdJ,sBAAMM,MAAN,CAAa,EAAC,aAAaT,EAAd,EAAkB,QAAQF,OAA1B,EAAmC,OAAOC,MAA1C,EAAb;AACA,oBAAIT,SAAS,IAAT,IAAiBA,KAAKoB,GAAL,KAAaX,MAAlC,EACII,MAAMQ,MAAN,CAAarB,IAAb;AACP,aAJD,MAIO,IAAIiB,IAAIK,SAAJ,KAAkBZ,EAAtB,EAA0B;AAC7B,oBAAIO,IAAIG,GAAJ,KAAYX,MAAhB,EAAwB;AACpB,wBAAIS,OAAOJ,KAAKI,IAAL,EAAX;AACA,wBAAIA,SAAS,IAAb,EAAmB;AACf,4BAAIT,WAAW,IAAf,EACII,MAAMQ,MAAN,CAAaJ,GAAb,EADJ,KAGIA,IAAIG,GAAJ,GAAUX,MAAV;AACJ,4BAAIT,SAAS,IAAT,IAAiBA,KAAKoB,GAAL,KAAaX,MAAlC,EACII,MAAMQ,MAAN,CAAarB,IAAb;AACP,qBAPD,MAOO,IAAIkB,KAAKE,GAAL,KAAaX,MAAjB,EAAyB;AAC5BI,8BAAMQ,MAAN,CAAaJ,GAAb;AACA,4BAAIjB,SAAS,IAAT,IAAiBA,KAAKoB,GAAL,KAAaX,MAAlC,EACII,MAAMQ,MAAN,CAAarB,IAAb;AACP,qBAJM,MAIA;AACHiB,4BAAIG,GAAJ,GAAUX,MAAV;AACH;AACJ;AACJ,aAlBM,MAkBA,IAAIQ,IAAIG,GAAJ,KAAYX,MAAhB,EAAwB;AAC3BI,sBAAMM,MAAN,CAAa,EAAC,aAAaT,EAAd,EAAkB,QAAQF,OAA1B,EAAmC,OAAOC,MAA1C,EAAb;AACH;AAEJ;;;mCAEW;;AAER,mBAAOjB,OAAOC,IAAP,CAAY,KAAKL,OAAjB,EAA0Ba,IAA1B,EAAP;AAEH;;;gCAEQ;;AAEL,gBAAIX,SAAS,KAAKF,OAAlB;;AAEA,gBAAImC,oBAAoB/B,OAAOC,IAAP,CAAYH,MAAZ,EACnBI,MADmB,CACZ,UAACC,EAAD;AAAA,uBAAQL,OAAOK,EAAP,EAAWC,IAAX,GAAkB,CAA1B;AAAA,aADY,EAEnBC,GAFmB,CAEf,UAACF,EAAD;AAAA,uBAAQL,OAAOK,EAAP,EAAWG,QAAX,EAAR;AAAA,aAFe,EAGnBD,GAHmB,CAGf,UAACE,CAAD;AAAA,uBAAOA,EAAEC,IAAF,EAAP;AAAA,aAHe,EAInBC,IAJmB,CAIdd,cAAciB,UAJA,CAAxB;AAKA,gBAAImB,kBAAkBlB,MAAlB,KAA6B,CAAjC,EACI,OAAO,IAAP;AACJ,gBAAImB,qBAAqBD,kBAAkB,CAAlB,EAAqBD,SAA9C;AACA,mBAAOC,kBACF7B,MADE,CACK,UAAC+B,MAAD;AAAA,uBAAYA,OAAOH,SAAP,KAAqBE,kBAAjC;AAAA,aADL,CAAP;AAGH;;;+BAEO;;AAEJ,gBAAIlC,SAAS,KAAKF,OAAlB;;AAEA,gBAAIsC,mBAAmBlC,OAAOC,IAAP,CAAYH,MAAZ,EAClBI,MADkB,CACX,UAACC,EAAD;AAAA,uBAAQL,OAAOK,EAAP,EAAWC,IAAX,GAAkB,CAA1B;AAAA,aADW,EAElBC,GAFkB,CAEd,UAACF,EAAD;AAAA,uBAAQL,OAAOK,EAAP,EAAWG,QAAX,EAAR;AAAA,aAFc,EAGlBD,GAHkB,CAGd,UAACE,CAAD;AAAA,uBAAOA,EAAEmB,IAAF,EAAP;AAAA,aAHc,EAIlBjB,IAJkB,CAIbd,cAAciB,UAJD,CAAvB;AAKA,gBAAIsB,iBAAiBrB,MAAjB,KAA4B,CAAhC,EACI,OAAO,IAAP;AACJ,gBAAIsB,mBAAmBD,iBAAiBA,iBAAiBrB,MAAjB,GAA0B,CAA3C,EAA8CiB,SAArE;AACA,mBAAOI,iBACFhC,MADE,CACK,UAAC+B,MAAD;AAAA,uBAAYA,OAAOH,SAAP,KAAqBK,gBAAjC;AAAA,aADL,CAAP;AAGH;;;6BAEKC,O,EAAS;;AAEX,gBAAItC,SAAS,KAAKF,OAAlB;;AAEA,gBAAIyC,mBAAmBrC,OAAOC,IAAP,CAAYH,MAAZ,EAClBI,MADkB,CACX,UAACC,EAAD;AAAA,uBAAQL,OAAOK,EAAP,EAAWC,IAAX,GAAkB,CAA1B;AAAA,aADW,EAElBC,GAFkB,CAEd,UAACF,EAAD;AAAA,uBAAQL,OAAOK,EAAP,EAAWoB,UAAX,CAAsBa,OAAtB,CAAR;AAAA,aAFc,EAGlB/B,GAHkB,CAGd,UAACE,CAAD,EAAO;AACR,uBAAOA,EAAEiB,IAAF,OAAa,IAAb,IAAqBjB,EAAEiB,IAAF,GAASM,SAAT,KAAuBM,QAAQN,SAA3D;AACIvB,sBAAEC,IAAF;AADJ,iBAEA,OAAOD,EAAEiB,IAAF,EAAP;AACH,aAPkB,EAQlBtB,MARkB,CAQX,UAAC+B,MAAD;AAAA,uBAAYA,WAAW,IAAvB;AAAA,aARW,EASlBxB,IATkB,CASbd,cAAciB,UATD,CAAvB;AAUA,gBAAIyB,iBAAiBxB,MAAjB,KAA4B,CAAhC,EACI,OAAO,IAAP;AACJ,gBAAIyB,iBAAiBD,iBAAiB,CAAjB,EAAoBP,SAAzC;AACA,mBAAOO,iBACFnC,MADE,CACK,UAAC+B,MAAD;AAAA,uBAAYA,OAAOH,SAAP,KAAqBQ,cAAjC;AAAA,aADL,CAAP;AAGH;;;6BAEKF,O,EAAS;;AAEX,gBAAItC,SAAS,KAAKF,OAAlB;;AAEA,gBAAI2C,mBAAmBvC,OAAOC,IAAP,CAAYH,MAAZ,EAClBI,MADkB,CACX,UAACC,EAAD;AAAA,uBAAQL,OAAOK,EAAP,EAAWC,IAAX,GAAkB,CAA1B;AAAA,aADW,EAElBC,GAFkB,CAEd,UAACF,EAAD;AAAA,uBAAQL,OAAOK,EAAP,EAAWqC,UAAX,CAAsBJ,OAAtB,CAAR;AAAA,aAFc,EAGlB/B,GAHkB,CAGd,UAACE,CAAD,EAAO;AACR,mBAAG;AACCA,sBAAEmB,IAAF;AACH,iBAFD,QAESnB,EAAEiB,IAAF,OAAa,IAAb,IAAqBjB,EAAEiB,IAAF,GAASM,SAAT,KAAuBM,QAAQN,SAF7D;AAGA,uBAAOvB,EAAEiB,IAAF,EAAP;AACH,aARkB,EASlBtB,MATkB,CASX,UAAC+B,MAAD;AAAA,uBAAYA,WAAW,IAAvB;AAAA,aATW,EAUlBxB,IAVkB,CAUbd,cAAciB,UAVD,CAAvB;AAWA,gBAAI2B,iBAAiB1B,MAAjB,KAA4B,CAAhC,EACI,OAAO,IAAP;AACJ,gBAAI4B,iBAAiBF,iBAAiBA,iBAAiB1B,MAAjB,GAA0B,CAA3C,EAA8CiB,SAAnE;AACA,mBAAOS,iBACFrC,MADE,CACK,UAAC+B,MAAD;AAAA,uBAAYA,OAAOH,SAAP,KAAqBW,cAAjC;AAAA,aADL,CAAP;AAGH;;;8BAEMvB,E,EAAIF,O,EAAS;AAAA;;AAEhB,gBAAIlB,SAAS,KAAKF,OAAlB;;AAEA,gBAAIoB,YAAYG,SAAhB,EAA2B;AACvB,oBAAIE,QAAQvB,OAAOkB,OAAP,CAAZ;AACA,oBAAIK,UAAUF,SAAd,EACI,OAAO,IAAP;AACJ,oBAAIG,OAAOD,MAAME,UAAN,CAAiB,EAACO,WAAWZ,EAAZ,EAAjB,CAAX;AACA,oBAAIwB,MAAMpB,KAAKI,IAAL,EAAV;AACA,uBAAOgB,QAAQ,IAAR,GAAe,IAAf,GAAsBA,IAAId,GAAjC;AACH;;AAED,mBAAO5B,OAAOC,IAAP,CAAYH,MAAZ,EACFI,MADE,CACK,UAACC,EAAD;AAAA,uBAAQL,OAAOK,EAAP,EAAWC,IAAX,GAAkB,CAA1B;AAAA,aADL,EAEFuC,MAFE,CAEK,UAACC,GAAD,EAAMzC,EAAN,EAAa;AACjB,oBAAIuC,MAAM,MAAKrB,KAAL,CAAWH,EAAX,EAAef,EAAf,CAAV;AACA,oBAAIuC,QAAQ,IAAZ,EACIE,IAAIzC,EAAJ,IAAUuC,GAAV;AACJ,uBAAOE,GAAP;AACH,aAPE,EAOA,EAPA,CAAP;AASH;;;qCAEa1B,E,EAAIF,O,EAAS;;AAEvB,gBAAIlB,SAAS,KAAKF,OAAlB;;AAEA,gBAAIoB,YAAYG,SAAhB,EAA2B;AACvB,oBAAIE,QAAQvB,OAAOkB,OAAP,CAAZ;AACA,oBAAIK,UAAUF,SAAd,EACI,OAAO,EAAC,QAAQ,IAAT,EAAe,MAAM,IAArB,EAAP;AACJ,oBAAIG,OAAOD,MAAME,UAAN,CAAiB,EAACO,WAAWZ,EAAZ,EAAjB,CAAX;AACA,oBAAI2B,WAAWvB,KAAKE,IAAL,EAAf;AACA,oBAAIsB,UAAUxB,KAAKI,IAAL,EAAd;AACA,oBAAIoB,YAAY,IAAZ,IAAoBD,aAAa,IAArC,EACI,OAAO,IAAP;AACJ,uBAAO;AACH,4BAAQC,OADL;AAEH,0BAAMD;AAFH,iBAAP;AAIH;;AAED,mBAAO7C,OAAOC,IAAP,CAAYH,MAAZ,EACFW,IADE,GAEFkC,MAFE,CAEK,UAACC,GAAD,EAAMzC,EAAN,EAAa;AACjB,oBAAIkB,QAAQvB,OAAOK,EAAP,CAAZ;AACA,oBAAImB,OAAOD,MAAME,UAAN,CAAiB,EAACO,WAAWZ,EAAZ,EAAjB,CAAX;AACA,oBAAI2B,WAAWvB,KAAKE,IAAL,EAAf;AACA,oBAAIsB,UAAUxB,KAAKI,IAAL,EAAd;AACA,oBAAIoB,YAAY,IAAZ,IAAoBD,aAAa,IAArC,EACID,IAAI7B,IAAJ,CAAS;AACL,4BAAQ+B,OADH;AAEL,0BAAMD;AAFD,iBAAT;AAIJ,uBAAOD,GAAP;AACH,aAbE,EAaA,EAbA,CAAP;AAeH;;;mCAEkBlC,C,EAAGC,C,EAAG;;AAErB,mBAAOD,EAAEoB,SAAF,GAAcnB,EAAEmB,SAAhB,GAA4B,CAAC,CAA7B,GACDpB,EAAEoB,SAAF,GAAcnB,EAAEmB,SAAhB,GAA4B,CAA5B,GACApB,EAAEqC,IAAF,GAASpC,EAAEoC,IAAX,GAAkB,CAAC,CAAnB,GACArC,EAAEqC,IAAF,GAASpC,EAAEoC,IAAX,GAAkB,CAAlB,GACA,CAJN;AAMH;;;;;;kBAKUpD,a","file":"temporalstate_es5.js","sourcesContent":["import bintrees from 'bintrees';\n\n\nclass temporalstate {\n\n    constructor () {\n\n        this._states = {};\n\n    }\n\n    change_list () {\n\n        let changes = [];\n        let states = this._states;\n\n        let val_iter_grp = Object.keys(states)\n            .filter((sn) => states[sn].size > 0)\n            .map((sn) => states[sn].iterator())\n            .map((i) => [i.next(), i])\n            .sort((a, b) => temporalstate.change_cmp(a[0], b[0]));\n        while (val_iter_grp.length > 0) {\n            let v = val_iter_grp[0][0];\n            let i = val_iter_grp[0][1];\n            changes.push(v);\n            val_iter_grp[0] = [i.next(), i];\n            val_iter_grp = val_iter_grp\n                .filter((a) => a[0] !== null)\n                .sort((a, b) => temporalstate.change_cmp(a[0], b[0]));\n        }\n\n        return changes;\n\n    }\n\n    add_change (st_name, st_val, ts) {\n\n        let states = this._states;\n        \n        if (states[st_name] === undefined)\n            states[st_name] = new bintrees.RBTree(temporalstate.change_cmp);\n\n        let state = states[st_name];\n        let iter = state.upperBound({'timestamp': ts});\n        let next = iter.data();\n        let cur = iter.prev();\n\n        if (cur === null) {\n            state.insert({'timestamp': ts, 'name': st_name, 'val': st_val});\n            if (next !== null && next.val === st_val)\n                state.remove(next);\n        } else if (cur.timestamp === ts) {\n            if (cur.val !== st_val) {\n                let prev = iter.prev();\n                if (prev === null) {\n                    if (st_val === null)\n                        state.remove(cur);\n                    else\n                        cur.val = st_val;\n                    if (next !== null && next.val === st_val)\n                        state.remove(next);\n                } else if (prev.val === st_val) {\n                    state.remove(cur);\n                    if (next !== null && next.val === st_val)\n                        state.remove(next);\n                } else {\n                    cur.val = st_val;\n                }\n            }\n        } else if (cur.val !== st_val) {\n            state.insert({'timestamp': ts, 'name': st_name, 'val': st_val});\n        }\n\n    }\n\n    var_list () {\n\n        return Object.keys(this._states).sort();\n\n    }\n\n    first () {\n\n        let states = this._states;\n\n        let first_val_changes = Object.keys(states)\n            .filter((sn) => states[sn].size > 0)\n            .map((sn) => states[sn].iterator())\n            .map((i) => i.next())\n            .sort(temporalstate.change_cmp);\n        if (first_val_changes.length === 0)\n            return null;\n        let earliest_timestamp = first_val_changes[0].timestamp;\n        return first_val_changes\n            .filter((change) => change.timestamp === earliest_timestamp);\n\n    }\n\n    last () {\n\n        let states = this._states;\n\n        let last_val_changes = Object.keys(states)\n            .filter((sn) => states[sn].size > 0)\n            .map((sn) => states[sn].iterator())\n            .map((i) => i.prev())\n            .sort(temporalstate.change_cmp);\n        if (last_val_changes.length === 0)\n            return null;\n        let oldest_timestamp = last_val_changes[last_val_changes.length - 1].timestamp;\n        return last_val_changes\n            .filter((change) => change.timestamp === oldest_timestamp);\n\n    }\n\n    next (current) {\n\n        let states = this._states;\n\n        let next_val_changes = Object.keys(states)\n            .filter((sn) => states[sn].size > 0)\n            .map((sn) => states[sn].upperBound(current))\n            .map((i) => {\n                while (i.data() !== null && i.data().timestamp === current.timestamp)\n                    i.next();\n                return i.data();\n            })\n            .filter((change) => change !== null)\n            .sort(temporalstate.change_cmp);\n        if (next_val_changes.length === 0)\n            return null;\n        let next_timestamp = next_val_changes[0].timestamp;\n        return next_val_changes\n            .filter((change) => change.timestamp === next_timestamp);\n\n    }\n\n    prev (current) {\n\n        let states = this._states;\n\n        let prev_val_changes = Object.keys(states)\n            .filter((sn) => states[sn].size > 0)\n            .map((sn) => states[sn].lowerBound(current))\n            .map((i) => {\n                do {\n                    i.prev();\n                } while (i.data() !== null && i.data().timestamp === current.timestamp);\n                return i.data();\n            })\n            .filter((change) => change !== null)\n            .sort(temporalstate.change_cmp);\n        if (prev_val_changes.length === 0)\n            return null;\n        let prev_timestamp = prev_val_changes[prev_val_changes.length - 1].timestamp;\n        return prev_val_changes\n            .filter((change) => change.timestamp === prev_timestamp);\n\n    }\n\n    state (ts, st_name) {\n\n        let states = this._states;\n\n        if (st_name !== undefined) {\n            let state = states[st_name];\n            if (state === undefined)\n                return null;\n            let iter = state.upperBound({timestamp: ts});\n            let rec = iter.prev();\n            return rec === null ? null : rec.val;\n        }\n\n        return Object.keys(states)\n            .filter((sn) => states[sn].size > 0)\n            .reduce((acc, sn) => {\n                let rec = this.state(ts, sn);\n                if (rec !== null)\n                    acc[sn] = rec;\n                return acc;\n            }, {});\n\n    }\n\n    state_detail (ts, st_name) {\n\n        let states = this._states;\n\n        if (st_name !== undefined) {\n            let state = states[st_name];\n            if (state === undefined)\n                return {'from': null, 'to': null};\n            let iter = state.upperBound({timestamp: ts});\n            let next_rec = iter.data();\n            let cur_rec = iter.prev();\n            if (cur_rec === null && next_rec === null)\n                return null;\n            return {\n                'from': cur_rec,\n                'to': next_rec\n            };\n        }\n\n        return Object.keys(states)\n            .sort()\n            .reduce((acc, sn) => {\n                let state = states[sn];\n                let iter = state.upperBound({timestamp: ts});\n                let next_rec = iter.data();\n                let cur_rec = iter.prev();\n                if (cur_rec !== null || next_rec !== null)\n                    acc.push({\n                        'from': cur_rec,\n                        'to': next_rec\n                    });\n                return acc;\n            }, []);\n\n    }\n\n    static change_cmp (a, b) {\n\n        return a.timestamp < b.timestamp ? -1\n            : a.timestamp > b.timestamp ? 1\n            : a.name < b.name ? -1\n            : a.name > b.name ? 1\n            : 0;\n\n    }\n\n}\n\n\nexport default temporalstate;\n"]}