{"version":3,"sources":["../lib/temporalstate.js"],"names":["temporalstate","params","_states","_txn","_valeqf","valeqf","change_valeqf","changes","states","val_iter_grp","Object","keys","filter","sn","size","map","iterator","i","next","sort","a","b","change_cmp","length","v","push","id","descr","fun","txn_stack","emit","pop","change","st_name","name","st_val","val","ts","timestamp","undefined","_priv_add_state","state","iter","upperBound","data","cur","prev","txn_descr","txn_funs","_priv_change_add","bind","_priv_change_remove","_priv_change_change","txn","forEach","f","find","first_val_changes","earliest_timestamp","last_val_changes","oldest_timestamp","current","next_val_changes","next_timestamp","lowerBound","prev_val_changes","prev_timestamp","rec","reduce","acc","next_rec","cur_rec","from_ts","to_ts","greedy","st_names","var_list","var_name","RBTree","insert","remove","new_val","old_val"],"mappings":"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","file":"temporalstate_es5.js","sourcesContent":["import bintrees from 'bintrees';\nimport event_emitter from 'events';\n\n\nclass temporalstate extends event_emitter {\n\n    constructor (params = {}) {\n\n        super();\n\n        this._states = {};\n        this._txn    = [];\n        this._valeqf = params.valeqf ? params.valeqf : temporalstate.change_valeqf;\n\n    }\n\n    change_list () {\n\n        let changes = [];\n        let states = this._states;\n\n        let val_iter_grp = Object.keys(states)\n            .filter((sn) => states[sn].size > 0)\n            .map((sn) => states[sn].iterator())\n            .map((i) => [i.next(), i])\n            .sort((a, b) => temporalstate.change_cmp(a[0], b[0]));\n        while (val_iter_grp.length > 0) {\n            let v = val_iter_grp[0][0];\n            let i = val_iter_grp[0][1];\n            changes.push(v);\n            val_iter_grp[0] = [i.next(), i];\n            val_iter_grp = val_iter_grp\n                .filter((a) => a[0] !== null)\n                .sort((a, b) => temporalstate.change_cmp(a[0], b[0]));\n        }\n\n        return changes;\n\n    }\n\n    txn (id, descr, fun) {\n\n        let txn_stack = this._txn;\n\n        txn_stack.push({\n            'id':    id,\n            'descr': descr,\n        });\n\n        this.emit('txn_start', id, descr, txn_stack);\n        fun();\n        this.emit('txn_end', id, descr, txn_stack);\n\n        txn_stack.pop();\n\n    }\n\n    add_change (change) {\n\n        let states = this._states;\n        let valeqf = this._valeqf;\n\n        let st_name = change.name;\n        let st_val  = change.val;\n        let ts      = change.timestamp;\n\n        if (states[st_name] === undefined)\n            this._priv_add_state(st_name);\n\n        let state = states[st_name];\n        let iter = state.upperBound(change);\n        let next = iter.data();\n        let cur = iter.prev();\n\n        let txn_descr = [];\n        let txn_funs = [];\n\n        if (cur === null) {\n            if (st_val !== null) {\n                txn_descr.push({'add': {'timestamp': ts, 'name': st_name, 'val': st_val}});\n                txn_funs.push(this._priv_change_add.bind(this, {'timestamp': ts, 'name': st_name, 'val': st_val}));\n                if (next !== null && valeqf(next.val, st_val)) {\n                    txn_descr.push({'rm': next});\n                    txn_funs.push(this._priv_change_remove.bind(this, next));\n                }\n            }\n        } else if (cur.timestamp === ts) {\n            if (!valeqf(cur.val, st_val)) {\n                let prev = iter.prev();\n                if (prev === null) {\n                    if (st_val === null) {\n                        txn_descr.push({'remove': cur});\n                        txn_funs.push(this._priv_change_remove.bind(this, cur));\n                    } else {\n                        txn_descr.push({'change': cur, 'new_val': st_val});\n                        txn_funs.push(this._priv_change_change.bind(this, cur, st_val));\n                    }\n                    if (next !== null && valeqf(next.val, st_val)) {\n                        txn_descr.push({'remove': next});\n                        txn_funs.push(this._priv_change_remove.bind(this, next));\n                    }\n                } else if (valeqf(prev.val, st_val)) {\n                    txn_descr.push({'remove': cur});\n                    txn_funs.push(this._priv_change_remove.bind(this, cur));\n                    if (next !== null && valeqf(next.val, st_val)) {\n                        txn_descr.push({'remove': next});\n                        txn_funs.push(this._priv_change_remove.bind(this, next));\n                    }\n                } else {\n                    txn_descr.push({'change': cur, 'new_val': st_val});\n                    txn_funs.push(this._priv_change_change.bind(this, cur, st_val));\n                }\n            }\n        } else if (!valeqf(cur.val, st_val)) {\n            txn_descr.push({'add': {'timestamp': ts, 'name': st_name, 'val': st_val}});\n            txn_funs.push(this._priv_change_add.bind(this, {'timestamp': ts, 'name': st_name, 'val': st_val}));\n            if (next !== null && valeqf(next.val, st_val)) {\n                txn_descr.push({'rm': next});\n                txn_funs.push(this._priv_change_remove.bind(this, next));\n            }\n        }\n\n        this.txn(\n            {'add': {'timestamp': ts, 'name': st_name, 'val': st_val}},\n            txn_descr,\n            function () { txn_funs.forEach((f) => f()); }\n        );\n\n    }\n\n    remove_change (change) {\n\n        let states = this._states;\n        let valeqf = this._valeqf;\n        let state = states[change.name];\n\n        if (state === undefined)\n            return;\n\n        let v = state.find(change);\n        if (v !== null && !valeqf(v.val, change.val))\n                return;\n\n        this.emit('txn_start', {'remove': change}, [{'remove': change}]);\n        this._priv_change_remove(change);\n        this.emit('txn_end', {'remove': change}, [{'remove': change}]);\n\n    }\n\n    var_list () {\n\n        return Object.keys(this._states).sort();\n\n    }\n\n    first (st_name) {\n\n        let states = this._states;\n\n        if (st_name !== undefined) {\n            let state = states[st_name];\n            if (state === undefined || state.size === 0)\n                return null;\n            return state.iterator().next();\n        }\n\n        let first_val_changes = Object.keys(states)\n            .filter((sn) => states[sn].size > 0)\n            .map((sn) => states[sn].iterator())\n            .map((i) => i.next())\n            .sort(temporalstate.change_cmp);\n        if (first_val_changes.length === 0)\n            return null;\n        let earliest_timestamp = first_val_changes[0].timestamp;\n        return first_val_changes\n            .filter((change) => change.timestamp === earliest_timestamp);\n\n    }\n\n    last (st_name) {\n\n        let states = this._states;\n\n        if (st_name !== undefined) {\n            let state = states[st_name];\n            if (state === undefined || state.size === 0)\n                return null;\n            return state.iterator().prev();\n        }\n\n        let last_val_changes = Object.keys(states)\n            .filter((sn) => states[sn].size > 0)\n            .map((sn) => states[sn].iterator())\n            .map((i) => i.prev())\n            .sort(temporalstate.change_cmp);\n        if (last_val_changes.length === 0)\n            return null;\n        let oldest_timestamp = last_val_changes[last_val_changes.length - 1].timestamp;\n        return last_val_changes\n            .filter((change) => change.timestamp === oldest_timestamp);\n\n    }\n\n    next (current, st_name) {\n\n        let states = this._states;\n\n        if (st_name !== undefined) {\n            let state = states[st_name];\n            if (state === undefined || state.size === 0)\n                return null;\n            return state.upperBound(current).data();\n        }\n\n        let next_val_changes = Object.keys(states)\n            .filter((sn) => states[sn].size > 0)\n            .map((sn) => states[sn].upperBound(current))\n            .map((i) => {\n                while (i.data() !== null && i.data().timestamp === current.timestamp)\n                    i.next();\n                return i.data();\n            })\n            .filter((change) => change !== null)\n            .sort(temporalstate.change_cmp);\n        if (next_val_changes.length === 0)\n            return null;\n        let next_timestamp = next_val_changes[0].timestamp;\n        return next_val_changes\n            .filter((change) => change.timestamp === next_timestamp);\n\n    }\n\n    prev (current, st_name) {\n\n        let states = this._states;\n\n        if (st_name !== undefined) {\n            let state = states[st_name];\n            if (state === undefined || state.size === 0)\n                return null;\n            let iter = state.lowerBound(current);\n            return iter.prev();\n        }\n\n        let prev_val_changes = Object.keys(states)\n            .filter((sn) => states[sn].size > 0)\n            .map((sn) => states[sn].lowerBound(current))\n            .map((i) => {\n                do {\n                    i.prev();\n                } while (i.data() !== null && i.data().timestamp === current.timestamp);\n                return i.data();\n            })\n            .filter((change) => change !== null)\n            .sort(temporalstate.change_cmp);\n        if (prev_val_changes.length === 0)\n            return null;\n        let prev_timestamp = prev_val_changes[prev_val_changes.length - 1].timestamp;\n        return prev_val_changes\n            .filter((change) => change.timestamp === prev_timestamp);\n\n    }\n\n    at (timestamp) {\n\n        let states = this._states;\n\n        return Object.keys(states)\n            .filter((sn) => states[sn].size > 0)\n            .map((sn) => states[sn].find({'timestamp': timestamp}))\n            .filter((v) => v !== null)\n            .sort(temporalstate.change_cmp);\n\n    }\n\n    after (timestamp) {\n\n        return this.next({'timestamp': timestamp});\n\n    }\n\n    before (timestamp) {\n\n        return this.prev({'timestamp': timestamp});\n\n    }\n\n    state (ts, st_name) {\n\n        let states = this._states;\n\n        if (st_name !== undefined) {\n            let state = states[st_name];\n            if (state === undefined)\n                return null;\n            let iter = state.upperBound({timestamp: ts});\n            let rec = iter.prev();\n            return rec === null ? null : rec.val;\n        }\n\n        return Object.keys(states)\n            .filter((sn) => states[sn].size > 0)\n            .reduce((acc, sn) => {\n                let rec = this.state(ts, sn);\n                if (rec !== null)\n                    acc[sn] = rec;\n                return acc;\n            }, {});\n\n    }\n\n    state_detail (ts, st_name) {\n\n        let states = this._states;\n\n        if (st_name !== undefined) {\n            let state = states[st_name];\n            if (state === undefined)\n                return {'from': null, 'to': null};\n            let iter = state.upperBound({timestamp: ts});\n            let next_rec = iter.data();\n            let cur_rec = iter.prev();\n            if (cur_rec === null && next_rec === null)\n                return null;\n            return {\n                'from': cur_rec,\n                'to': next_rec\n            };\n        }\n\n        return Object.keys(states)\n            .sort()\n            .reduce((acc, sn) => {\n                let state = states[sn];\n                let iter = state.upperBound({timestamp: ts});\n                let next_rec = iter.data();\n                let cur_rec = iter.prev();\n                if (cur_rec !== null || next_rec !== null)\n                    acc.push({\n                        'from': cur_rec,\n                        'to': next_rec\n                    });\n                return acc;\n            }, []);\n\n    }\n\n    between (from_ts, to_ts, greedy, st_name) {\n\n        let states = this._states;\n\n        if (greedy === undefined)\n            greedy = false;\n\n        let st_names = st_name === undefined\n            ? this.var_list()\n            : [st_name];\n\n        let changes = [];\n        for (let i = 0; i < st_names.length; i++) {\n            let state = states[st_names[i]];\n            let iter = state.upperBound({timestamp: from_ts});\n            let cur_rec = iter.prev();\n            if (cur_rec !== null && (greedy || cur_rec.timestamp === from_ts))\n                changes.push(cur_rec);\n            while ((cur_rec = iter.next()) && cur_rec.timestamp <= to_ts) {\n                changes.push(cur_rec);\n            }\n        }\n\n        return changes.sort(temporalstate.change_cmp);\n\n    }\n\n    remove_var (var_name) {\n\n        let states = this._states;\n        let state  = states[var_name];\n\n        if (state && state.size === 0) {\n            this.emit('rm_var', var_name);\n            delete states[var_name];\n            return true;\n        }\n\n        return false;\n\n    }\n\n    _priv_add_state (st_name) {\n\n        this.emit('new_var', st_name);\n        this._states[st_name] = new bintrees.RBTree(temporalstate.change_cmp);\n\n    }\n\n    _priv_change_add (change) {\n\n        this.emit('add', {'timestamp': change.timestamp, 'name': change.name, 'val': change.val});\n        this._states[change.name].insert(change);\n\n    }\n\n    _priv_change_remove (change) {\n\n        this.emit('rm', {'timestamp': change.timestamp, 'name': change.name, 'val': change.val});\n        this._states[change.name].remove(change);\n\n    }\n\n    _priv_change_change (change, new_val) {\n\n        let old_val = change.val;\n\n        this.emit('change', {'timestamp': change.timestamp, 'name': change.name, 'val': old_val}, new_val);\n        change.val = new_val;\n\n    }\n\n    static change_cmp (a, b) {\n\n        return a.timestamp < b.timestamp ? -1\n            : a.timestamp > b.timestamp ? 1\n            : a.name < b.name ? -1\n            : a.name > b.name ? 1\n            : 0;\n\n    }\n\n    static change_valeqf (a, b) {\n\n        return a === b;\n\n    }\n\n}\n\n\nexport default temporalstate;\n"]}